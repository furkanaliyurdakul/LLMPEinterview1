 Welcome class to the AI for Cybersecurity. In this lecture, we will be discussing the detection of email threats using AI. The code for this module can be found in Chapter 3 folder on the Kali VM. We will now have a look at our first cybersecurity problem, that of detecting email spam. Believe it or not, email is a huge attack surface. Each of us receive huge volumes of email every day. This is the perfect application to build an AI analytic to provide automated protection. We are not alone in our pursuits. One of the first AI automatic email spam filters was SpamAssassin. Please investigate for yourself to enhance your understanding. Initially, spam filters may have been very simple and composed of static rules and statistical analysis. Some of them may have just tracked certain keywords. The singular presence of these keywords alone would not meet the threshold. But certain keywords found in the email together can meet the threshold for spam or malicious intent, as illustrated in the top table. Then, as spammers became smarter, they may have been in need for more nuanced spam rules, which track the frequency of keywords and may have applied a mathematical transform and then apply the threshold. As spammers progress further, there may have been a need to change the keywords or recalibrate the threshold, like in the second table in the slide. As spammers get smarter and smarter, more simplistic spam filters would never work. And where we are today is a need for more dynamic spam filters, like those that AI can provide. Now, let us switch gears and talk about AI for a moment. We mentioned neural networks in the last module. Here, we will dive a little deeper and attempt to be even more deliberate in drawing parallels between human brain neurons and artificial neural network neurons. See side-by-side comparison. The biological neuron takes in stimuli through its dendrites, which causes electrical changes in the cell body. If the stimulus from the dendrites is strong enough, a resulting signal is sent to the axon and travels down the axon to the axon terminals, where it is set to fire. For this discussion, we will focus on the perceptron, which is the most basic neural network. Instead of having a hidden layer, it has a transfer function that takes in inputs similar to dendrites, applies weights, processes the weights input, and sends out to an activation function, which has a threshold applied to it. The perceptron iteratively sets its weights to properly classify training data with the hopes that these optimized weights will allow it to yield high performance in classifying future unseen data. I am not sure if you realize this or not, but data science is mostly math. However, the good thing is that in this class, you retain the role of a cyber analyst, only playing data scientist for the purpose of being AI, for the purpose of developing AI tools to solve cybersecurity problems, which means that you get to gloss over the math and just focus on a high level understanding of the AI algorithms. So we can focus on the perceptron as being a linear classifier, which means that it can classify data by drawing a straight line, similar to the example spam filters we discussed earlier. So we can essentially have the perceptron perform the same level of spam filtering as the example we talked through. In this slide, we focus on the mechanics of setting weights. As I mentioned in the previous slide, the perceptron iteratively updates its weights during its training process. Now to be clear, this describes the perceptron's learning process. It iteratively updates its weights based on the difference between training and predictive values. The slide also ties in the learning rate, which describes how quickly the weights can be updated. Finally, the perceptron is only effective in separating linearly separable data as illustrated in the plot in the upper right-hand corner of the slide. Thank you. Welcome class to AI for Cybersecurity. In this lecture, we will be focusing on hands-on example of the use of a machine learning perceptron for spam filtering. This is the first attempt at using AI for spam filtering, for spam filtering using a real public data set. This slide illustrates a snippet of the public data set in the upper right-hand corner of the slide. Each row of the data set is a SMS text message that is labeled HAM or spam. We refer back to our simplistic example and use the keywords. Then filter the data set for the keywords and track their frequency and record this into a new data set. And we also retain the labels. In this slide, data engineering steps for the machine learning analytic development process are performed. The data is read in from a CSV file and preprocessed and a new data set is created. In this slide, the data scientist steps for the machine learning analytic development process are performed. The new data set is broken up into training and testing data set. The data set is composed of two features, which are the frequency of the appearance of the two keywords per SMS text. These raw features are used without any mathematical transformation being applied to them. Then the perceptron is instantiated. Initial optimizations are applied to its configuration settings. Then the perceptron is trained and eventually tested. At this point, for all practical purposes, the machine learning analytic has been developed. In this slide, data scientist steps continue. The decision space is visualized along with the test data points and the accuracy of the machine learning analytic is evaluated. The accuracy of the machine learning analytic is pretty good. There are many more critical metrics that could be used, but we will discuss those later in the course. For now, we focus on the simple metric of accuracy. We can iteratively modify its configuration settings and attempt to produce more accurate results. But again, we will keep everything as simple as possible for now. We acknowledge that the perceptron is limited to solving linearly separable problems, but it does appear to do them very well. Thank you. Welcome, class, to AI for Cybersecurity. In this lecture, we will be focusing on a hands-on example of the use of a machine learning support vector machine for spam filtering. The support vector machine is similar to the perceptron in that it is a supervised machine learning algorithm. However, it is different from the perceptron and its goals. The perceptron seeks to classify data by minimizing classification errors. While the support vector machine seeks to maximize the distance between the hyperplane it uses to separate the data and the training data closest to the hyperplane. The support vector machine can also classify non-linearly separable data. This is another attempt at using AI for spam filtering using the same public data set as the perceptron. This slide illustrates a snippet of the public data set in the upper right-hand corner of the slide. Each row of the data set is an SMS text message that is labeled HAM or SPAM. This time we use a set of keywords referred to as suspect words for SPAM and neutral words for HAM. And now the score function can no longer be modeled as a linear function. This is a very important distinction because the resulting data set is no longer linearly separable. And thus a harder problem which the perceptron can no longer solve. Next, the data set is filtered for the set of keywords in their frequency track. This is recorded into a new data set and we also retain the labels. In this slide, the data engineering steps for the machine learning analytic development process are performed. The data is read in from a CSV file and preprocessed and a new data set is created. In this slide, the data scientist steps from the machine learning analytic development process are performed. The new data set is broken up into training and testing data set. This data set is composed of two features, which are the frequency of the appearance of the set of keywords per SMS text. These raw features are used without any mathematical transformations being applied to them. Then the support vector machine is instantiated. Initial optimizations are applied to its configuration settings. Then the support vector machine is trained and eventually tested. At this point, for all practical purposes, the machine learning analytic has been developed. In this slide, data scientist steps continue. The decision space is visualized along with the test data points and the accuracy of the machine learning analytic is evaluated. The accuracy of the machine learning analytic is pretty good, considering this is no longer a linearly separable problem. It is a harder problem now. Again, there are many more critical metrics that could be used, but for now we will focus on the simple metric of accuracy. Also, we could iteratively modify the machine learning analytic configuration settings and attempt to produce more accurate results. But again, we will keep everything as simple as possible for now. The support vector machine is also capable of detecting spam via images. Click the link and have a look at further examples if you are interested. Thank you. Thank you.